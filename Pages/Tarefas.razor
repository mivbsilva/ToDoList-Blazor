@page "/tarefas" 
@* Define o caminho da p√°gina *@
@using System.Collections.Generic
@* √â o namespace que precisamos usar para podermos acessar a classe de List *@

<h1 class="text-2xl font-bold mb-4">ToDoList da Milena</h1> @* T√≠tulo *@

@* Bot√£o para criar nova lista *@
<button @onclick="CriarNovaLista" class="bg-blue-500 text-white px-4 py-2 rounded mb-4">Criar Nova Lista</button>

@* Iniciando a lista *@
@foreach (var lista in listas){

    @* Cria-se uma div *@
    <div class="mb-4"> @* Cria-se uma div *@
        
        @* Exibe o nome da lista num h2 *@
        <h2 class="text-xl font-semibold mb-2">@lista.Nome</h2>

        @* Cria uma bot√£o escrito Selecionar Lista que, quando clicado, chama a fun√ß√£o SelecionarLista *@
        <button @onclick="() => SelecionarLista(lista)" class="bg-green-500 text-white px-4 py-2 rounded mb-2">Selecionar Lista</button> 

        @* Cria uma lista html *@
        <ul>
            @foreach (var tarefa in lista.Tarefas.Select((t, i) => new { Texto = t, Index = i })){ //Para cada tarefa na lista selecionada de tarefas

                <li class="border-b py-2 flex justify-between items-center">

                    @* Se o index da tarefa for igual ao index da tarefa passada no indexDaTarefaEmEdicao, ent√£o vamos editar *@
                    @if (tarefa.Index == indexDaTarefaEmEdicao){ 

                        @* Cria uma input para editar ligado acessar vari√°vel string textoDaTarefaEditada *@
                        <input @bind="textoDaTarefaEditada" class="border p-2 rounded w-full mr-2" />
                        @* Cria uma bot√£o escrito salvar que, quando clicado, chama a fun√ß√£o SalvarEdicao *@
                        <button @onclick="SalvarEdicao" class="bg-green-500 text-white px-2 py-1 rounded ml-2">Salvar</button>
                        @* Cria uma bot√£o escrito cancelar que, quando clicado, chama a fun√ß√£o CancelarEdicao *@
                        <button @onclick="CancelarEdicao" class="bg-gray-400 text-white px-2 py-1 rounded ml-2">Cancelar</button>
                    }
                    else{
                        @* Se o index da tarefa for diferente ao index da tarefa passada no indexDaTarefaEmEdicao, ent√£o n√£o vamos fazer nada. Vamos continuar pegando o texto da tarefa *@

                        <span>@tarefa.Texto</span>

                        @* Vamos continuar exibindo o bot√£o de Editar *@
                        <button @onclick="() => EditarTarefa(tarefa.Index)" class="text-blue-500 text-sm ml-2">‚úèÔ∏è Editar</button>
                        @* Cria uma bot√£o escrito excluir que, quando clicado, chama a fun√ß√£o ExcluirTarefa *@
                        <button @onclick="() => ExcluirTarefa(tarefa.Index)" class="text-red-500 text-sm ml-2">üóëÔ∏è Excluir</button>
                    }
                </li>
            }
        </ul>

        @if (lista == listaSelecionada) // se a lista √© a mesma da listaSelecionada
        {
            @* Cria um input para inserirmos uma nova tarefa *@
            <input @bind="novaTarefa" placeholder="Digite uma nova tarefa" class="border p-2 rounded w-full mb-2" />
            @* Cria um bot√£o para inserir a tarefa do input *@
            <button @onclick="AdicionarTarefa" class="bg-blue-500 text-white px-4 py-2 rounded">Adicionar</button>
        }
    </div>
}

@code {

    private List<ListaDeTarefas> listas = new(); //Cria a vari√°vel listas que √© uma List de Lists strings
    private ListaDeTarefas listaSelecionada; //Cria a vari√°vel listaSelecionada que √© uma ListaDeTarefas que √© uma List de strings
    private string novaTarefa; //Cria a vari√°vel novaTarefa que √© uma string
    
    private int? indexDaTarefaEmEdicao = null; //Cria a vari√°vel indexDaTarefaEmEdicao que ir√° guardar o index da tarefa que estou editando int. Pode ser null pelo ?
    private string textoDaTarefaEditada = string.Empty; //Cria a vari√°vel textoDaTarefaEditada que ir√° guardar a nova tarefa inclu√≠da no input que √© uma string

    // fun√ß√£o para criar uma nova lista
    private void CriarNovaLista() //chamada quando clicamos no bot√£o Criar Nova Lista
    {
        var novaLista = new ListaDeTarefas { Nome = "Nova Lista", Tarefas = new List<string>() }; //declarando uma vari√°vel novaLista do tipo ListaDeTarefas. Seu nome √© Nova Lista e suas Tarefas √© uma lista de strings, que s√£o os itens
        listas.Add(novaLista); // em listas, que √© uma List de Lists strings, vamos adicionar a novaLista
        listaSelecionada = novaLista; //vamos falar que nossa novaLista ser√° ent√£o a listaSelecionada, para saber de qual lista estamos falando
    }

    // Fun√ß√£o para selecionar uma lista. Ap√≥s sabermos de qual lista estamos falando, vamos selecion√°-la
    private void SelecionarLista(ListaDeTarefas lista) //chamada quando clicamos no bot√£o Criar Nova Lista. Recebe uma lista do tipo ListaDeTarefas
    {
        listaSelecionada = lista;
    }

    //fun√ß√£o para adicionar tarefa
    private void AdicionarTarefa() //chamada quando clicamos no bot√£o Adicionar
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa)){ //se a string guardada na nova tarefa n√£o for nula ou espa√ßo em branco, ent√£o existe uma tarefa preenchida. Ent√£o:
            listaSelecionada.Tarefas.Add(novaTarefa); //adiciona a nova tarefa na lista tarefas selecionada
            novaTarefa = string.Empty; //limpa a vari√°vel string novaTarefa
        }
    }

    // Fun√ß√£o para editar uma tarefa
    private void EditarTarefa(int index) //chamada quando clicamos no bot√£o Editar
    {
        indexDaTarefaEmEdicao = index; //s√≥ vai guardar qual o index da tarefa em edi√ß√£o
        textoDaTarefaEditada = listaSelecionada.Tarefas[index]; // vai guardar o texto string daquele index da lista tarefas selecionada
    }

    //fun√ß√£o para salvar edi√ß√£o
    private void SalvarEdicao() //chamada quando clicamos no bot√£o Salvar
    {
        if (indexDaTarefaEmEdicao != null && !string.IsNullOrWhiteSpace(textoDaTarefaEditada)){ //se o index da tarefa em edi√ß√£o n√£o for nulo e a string do textoDaTarefaEditada n√£o for nula ou whitespace, quer dizer que existe item em edi√ß√£o. Ent√£o:

            listaSelecionada.Tarefas[(int)indexDaTarefaEmEdicao] = textoDaTarefaEditada; //na lista de tarefas selecionada, no index da tarefa em edi√ß√£o, vamos colocar o texto da tarefa editada
            indexDaTarefaEmEdicao = null; //vamos limpar o index da tarefa em edi√ß√£o
            textoDaTarefaEditada = string.Empty; //vamos limpar a string do texto da tarefa editada
        }
    }

    //fun√ß√£o para cancelar edi√ß√£o
    private void CancelarEdicao() //chamada quando clicamos no bot√£o Cancelar
    {
        indexDaTarefaEmEdicao = null; //s√≥ limpa o index da tarefa em edi√ß√£o e n√£o faz nada
        textoDaTarefaEditada = string.Empty; //s√≥ limpa a string da tarefa em edi√ß√£o e n√£o faz nada
    }

    // Fun√ß√£o para excluir tarefa
    private void ExcluirTarefa(int index){ //chamada quando clicamos no bot√£o ExcluirTarefa
        if (index >= 0 && index < listaSelecionada.Tarefas.Count){ //se o index for maior ou igual a 0 e o index for menor que a quantidade de itens, ent√£o:
            listaSelecionada.Tarefas.RemoveAt(index); //s√≥ remover
        }
    }

    // Classe para representar uma lista de tarefas
    public class ListaDeTarefas
    {
        public string Nome { get; set; }
        public List<string> Tarefas { get; set; }
    }
}
